(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{674:function(e,v,_){"use strict";_.r(v);var t=_(10),c=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"reflect"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[e._v("#")]),e._v(" Reflect")]),e._v(" "),_("p",[_("code",[e._v("Reflect")]),e._v("对象和"),_("code",[e._v("Proxy")]),e._v("对象一样，都是ES6为了操作对象而提供的新API")]),e._v(" "),_("h2",{attrs:{id:"设计目的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计目的"}},[e._v("#")]),e._v(" 设计目的")]),e._v(" "),_("ol",[_("li",[e._v("从"),_("code",[e._v("Reflect")]),e._v("对象上可以拿到语言内部的方法。将"),_("code",[e._v("Object")]),e._v("对象的一些明显属于语言内部的方法（例如"),_("code",[e._v("Object.defineProperty")]),e._v("),放到"),_("code",[e._v("Reflect")]),e._v("对象上。现阶段，两个同时部署，未来新特性只部署"),_("code",[e._v("Reflect")]),e._v("对象上。")]),e._v(" "),_("li",[e._v("修改某些方法的返回结果，让其变的更合理，例如："),_("code",[e._v("Object.defineProperty(obj, name, desc)")]),e._v("在无法定义属性时，会抛出一个错误，而"),_("code",[e._v("Reflect.defineProperty(obj, name, desc)")]),e._v("则会返回"),_("code",[e._v("false")]),e._v("。")]),e._v(" "),_("li",[e._v("让"),_("code",[e._v("Object")]),e._v("操作都变成函数行为。例如"),_("code",[e._v("in delete")]),e._v("命令式")]),e._v(" "),_("li",[_("code",[e._v("Reflect")]),e._v("对象的方法与"),_("code",[e._v("Proxy")]),e._v("对象的方法一一对应。让"),_("code",[e._v("Proxy")]),e._v("对象方便调用对应的"),_("code",[e._v("Reflect")]),e._v("方法，完成默认行为，作为修改行为的基础")]),e._v(" "),_("li",[e._v("增强易读性，例如 "),_("code",[e._v("Reflect.apply(func, thisArg, args)")]),e._v("方法等同于"),_("code",[e._v("Function.prototype.apply.call(func, thisArg, args)")]),e._v("和 "),_("code",[e._v("func.apply(thisArg, args)")]),e._v("，用于绑定"),_("code",[e._v("this")]),e._v("对象后执行给定函数。")])]),e._v(" "),_("h3",{attrs:{id:"方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),_("ol",[_("li",[_("p",[_("code",[e._v("Reflect.get(target, propKey, receiver)")]),e._v(":查找并返回属性`")]),e._v(" "),_("ul",[_("li",[e._v("不存在的属性，返回"),_("code",[e._v("undefined")])]),e._v(" "),_("li",[e._v("如果"),_("code",[e._v("propKey")]),e._v("属性部署了读取函数（"),_("code",[e._v("getter")]),e._v("）,"),_("code",[e._v("receiver")]),e._v("传入则读取函数的"),_("code",[e._v("this")]),e._v("指向"),_("code",[e._v("receiver")]),e._v("否则指向"),_("code",[e._v("target")])]),e._v(" "),_("li",[e._v("第一个参数不是对象，会报错")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Reflect.set(target, propKey, value, receiver)")]),e._v(":设置属性")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Proxy")]),e._v("和"),_("code",[e._v("Reflect")]),e._v("联合使用，前者拦截赋值，后者完成赋值的默认行为，而且传入了"),_("code",[e._v("receiver")]),e._v(",那么"),_("code",[e._v("Reflect.set")]),e._v("会触发"),_("code",[e._v("Proxy.defineProperty")]),e._v("拦截")]),e._v(" "),_("li",[e._v("如果"),_("code",[e._v("propKey")]),e._v("属性部署了赋值函数（"),_("code",[e._v("setter")]),e._v("）,"),_("code",[e._v("receiver")]),e._v("传入则读取函数的"),_("code",[e._v("this")]),e._v("指向"),_("code",[e._v("receiver")]),e._v("否则指向"),_("code",[e._v("target")])]),e._v(" "),_("li",[e._v("第一个参数不是对象，会报错")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Reflect.apply(func, ctx, args)")]),e._v(": 用于绑定"),_("code",[e._v("this")]),e._v("对象后执行给定函数")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("args")]),e._v("没有入参也要传"),_("code",[e._v("[]")])]),e._v(" "),_("li",[e._v("直接调用Reflect.apply方法,也会被拦截"),_("code",[e._v("Reflect.apply(fnProxy, null, [9, 10]) // 38")])])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Reflect.construct(target, args)")]),e._v(": 等同"),_("code",[e._v("new proxy(...args)")]),e._v("，提供了一种不使用"),_("code",[e._v("new")]),e._v("来构造函数的方法")]),e._v(" "),_("ul",[_("li",[e._v("第一个参数不是函数，会报错")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Reflect.has(target, propKey)")]),e._v(":判断属性，对应"),_("code",[e._v("propKey in proxy")])]),e._v(" "),_("ul",[_("li",[e._v("第一个参数不是对象，会报错")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("Reflect.deleteProperty(target, propKey)")]),e._v(":删除属性，对应"),_("code",[e._v("delete proxy[propKey]")])]),e._v(" "),_("ul",[_("li",[e._v("第一个参数不是对象，会报错")])])])]),e._v(" "),_("h3",{attrs:{id:"实例-使用proxy实现观察者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实例-使用proxy实现观察者模式"}},[e._v("#")]),e._v(" 实例：使用Proxy实现观察者模式")]),e._v(" "),_("blockquote",[_("p",[e._v("观察者模式（observer mode）指的是函数自动观察数据对象，一但数据对象有变化，函数就会自动执行")])]),e._v(" "),_("h3",{attrs:{id:"示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),_("p",{staticClass:"codepen",staticStyle:{height:"600px","box-sizing":"border-box",display:"flex","align-items":"center","justify-content":"center",border:"2px solid",margin:"1em 0",padding:"1em"},attrs:{"data-height":"600","data-theme-id":"dark","data-default-tab":"js","data-slug-hash":"rNJEagp","data-user":"Jun_9527"}},[_("span",[e._v("See the Pen "),_("a",{attrs:{href:"https://codepen.io/Jun_9527/pen/rNJEagp"}},[e._v("\n  Reflect")]),e._v(" by Jun_9527 ("),_("a",{attrs:{href:"https://codepen.io/Jun_9527"}},[e._v("@Jun_9527")]),e._v(")\n  on "),_("a",{attrs:{href:"https://codepen.io"}},[e._v("CodePen")]),e._v(".")])]),e._v(" "),_("script",{attrs:{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"}})])}),[],!1,null,null,null);v.default=c.exports}}]);